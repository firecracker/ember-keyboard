"use strict";define("dummy/app",["exports","ember","dummy/resolver","ember-load-initializers","dummy/config/environment"],function(e,t,n,r,a){var o=void 0;t.default.MODEL_FACTORY_INJECTIONS=!0,o=t.default.Application.extend({modulePrefix:a.default.modulePrefix,podModulePrefix:a.default.podModulePrefix,Resolver:n.default}),(0,r.default)(o,a.default.modulePrefix),e.default=o}),define("dummy/components/app-version",["exports","ember-cli-app-version/components/app-version","dummy/config/environment"],function(e,t,n){var r=n.default.APP.name,a=n.default.APP.version;e.default=t.default.extend({version:a,name:r})}),define("dummy/components/key-down-counter",["exports","ember","ember-keyboard"],function(e,t,n){var r=t.default.Component,a=t.default.computed,o=t.default.on;e.default=r.extend(n.EKMixin,{tagName:"span",classNames:"counter-container",toggleActivated:!0,hook:"counter",counter:0,keyboardActivated:a("parentActivated","toggleActivated","activatedToggle",{get:function(){var e=!this.get("activatedToggle")||this.get("toggleActivated");return e&&this.get("parentActivated")}}).readOnly(),decrementCounter:o((0,n.keyDown)("ArrowLeft"),function(){this.decrementProperty("counter")}),incrementCounter:o((0,n.keyDown)("ArrowRight"),function(){this.incrementProperty("counter")}),decrementCounter10:o((0,n.keyDown)("shift+ArrowLeft"),function(){this.decrementProperty("counter",10)}),incrementCounter10:o((0,n.keyDown)("shift+ArrowRight"),function(){this.incrementProperty("counter",10)}),decrementCounter100:o((0,n.keyDown)("ctrl+shift+ArrowLeft"),function(){this.decrementProperty("counter",100)}),incrementCounter100:o((0,n.keyDown)("ctrl+shift+ArrowRight"),function(){this.incrementProperty("counter",100)}),resetCounter:o((0,n.keyUp)("KeyR"),function(){this.set("counter",0)}),setCounterTo5:o((0,n.keyPress)("Digit5"),function(){this.set("counter",5)})})}),define("dummy/components/keyboard-activated-widget",["exports","ember","dummy/mixins/enterable"],function(e,t,n){var r=t.default.Component;e.default=r.extend(n.default)}),define("dummy/components/keyboard-first-responder-widget",["exports","ember","dummy/mixins/enterable"],function(e,t,n){var r=t.default.Component;e.default=r.extend(n.default)}),define("dummy/components/keyboard-lax-priority-widget",["exports","ember","dummy/mixins/enterable"],function(e,t,n){var r=t.default.Component;e.default=r.extend(n.default)}),define("dummy/components/keyboard-priority-widget",["exports","ember","dummy/mixins/enterable"],function(e,t,n){var r=t.default.Component;e.default=r.extend(n.default)}),define("dummy/components/trigger-event-test",["exports","ember","dummy/templates/components/trigger-event-test","ember-keyboard"],function(e,t,n,r){e.default=t.default.Component.extend(r.EKMixin,{layout:n.default,keyboardActivated:!0,keyDown:!1,keyDownWithMods:!1,keyPress:!1,keyUp:!1,onKeyDown:t.default.on((0,r.keyDown)("KeyA"),function(){this.toggleProperty("keyDown")}),onKeyDownWithMods:t.default.on((0,r.keyDown)("KeyA+cmd+shift"),function(){this.toggleProperty("keyDownWithMods")}),onKeyPress:t.default.on((0,r.keyPress)("KeyA"),function(){this.toggleProperty("keyPress")}),onKeyUp:t.default.on((0,r.keyUp)("KeyA"),function(){this.toggleProperty("keyUp")})})}),define("dummy/helpers/format-markdown",["exports","ember","markdown-code-highlighting/helpers/format-markdown"],function(e,t,n){e.default=n.default}),define("dummy/helpers/hook",["exports","ember-hook/helpers/hook"],function(e,t){Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"hook",{enumerable:!0,get:function(){return t.hook}})}),define("dummy/helpers/pluralize",["exports","ember-inflector/lib/helpers/pluralize"],function(e,t){e.default=t.default}),define("dummy/helpers/singularize",["exports","ember-inflector/lib/helpers/singularize"],function(e,t){e.default=t.default}),define("dummy/initializers/app-version",["exports","ember-cli-app-version/initializer-factory","dummy/config/environment"],function(e,t,n){e.default={name:"App Version",initialize:(0,t.default)(n.default.APP.name,n.default.APP.version)}}),define("dummy/initializers/container-debug-adapter",["exports","ember-resolver/container-debug-adapter"],function(e,t){e.default={name:"container-debug-adapter",initialize:function(){var e=arguments[1]||arguments[0];e.register("container-debug-adapter:main",t.default),e.inject("container-debug-adapter:main","namespace","application:main")}}}),define("dummy/initializers/data-adapter",["exports","ember"],function(e,t){e.default={name:"data-adapter",before:"store",initialize:t.default.K}}),define("dummy/initializers/ember-data",["exports","ember-data/setup-container","ember-data/-private/core"],function(e,t,n){e.default={name:"ember-data",initialize:t.default}}),define("dummy/initializers/ember-hook/initialize",["exports","ember-hook/initializers/ember-hook/initialize"],function(e,t){Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return t.initialize}})}),define("dummy/initializers/ember-keyboard-first-responder-inputs",["exports","ember-keyboard/initializers/ember-keyboard-first-responder-inputs"],function(e,t){Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return t.initialize}})}),define("dummy/initializers/export-application-global",["exports","ember","dummy/config/environment"],function(e,t,n){function r(){var e=arguments[1]||arguments[0];if(n.default.exportApplicationGlobal!==!1){var r,a=n.default.exportApplicationGlobal;r="string"==typeof a?a:t.default.String.classify(n.default.modulePrefix),window[r]||(window[r]=e,e.reopen({willDestroy:function(){this._super.apply(this,arguments),delete window[r]}}))}}e.initialize=r,e.default={name:"export-application-global",initialize:r}}),define("dummy/initializers/injectStore",["exports","ember"],function(e,t){e.default={name:"injectStore",before:"store",initialize:t.default.K}}),define("dummy/initializers/store",["exports","ember"],function(e,t){e.default={name:"store",after:"ember-data",initialize:t.default.K}}),define("dummy/initializers/transforms",["exports","ember"],function(e,t){e.default={name:"transforms",before:"store",initialize:t.default.K}}),define("dummy/instance-initializers/ember-data",["exports","ember-data/-private/instance-initializers/initialize-store-service"],function(e,t){e.default={name:"ember-data",initialize:t.default}}),define("dummy/mixins/enterable",["exports","ember"],function(e,t){var n=t.default.Mixin,r=t.default.inject.service;e.default=n.create({classNames:["keyboard-widget"],classNameBindings:["keyboardActivated:active"],widgetManager:r(),click:function(){this._activate()},deactivate:function(){this.set("keyboardActivated",!1)},_activate:function(){this.get("widgetManager").activate(this),this.set("keyboardActivated",!0)}})}),define("dummy/mixins/reset-scroll-position",["exports","ember"],function(e,t){e.default=t.default.Mixin.create({activate:function(){this._super.apply(this,arguments),"undefined"==typeof FastBoot&&window.scrollTo(0,0)}})}),define("dummy/resolver",["exports","ember-resolver"],function(e,t){e.default=t.default}),define("dummy/router",["exports","ember","dummy/config/environment"],function(e,t,n){var r=t.default.Router.extend({location:n.default.locationType});r.map(function(){this.route("test-scenario"),this.route("mixins"),this.route("priority"),this.route("usage"),this.route("testing")}),e.default=r}),define("dummy/routes/index",["exports","ember","dummy/mixins/reset-scroll-position"],function(e,t,n){e.default=t.default.Route.extend(n.default)}),define("dummy/routes/mixins",["exports","ember","dummy/mixins/reset-scroll-position"],function(e,t,n){e.default=t.default.Route.extend(n.default)}),define("dummy/routes/priority",["exports","ember","dummy/mixins/reset-scroll-position"],function(e,t,n){e.default=t.default.Route.extend(n.default)}),define("dummy/routes/testing",["exports","ember","dummy/mixins/reset-scroll-position"],function(e,t,n){e.default=t.default.Route.extend(n.default)}),define("dummy/routes/usage",["exports","ember","dummy/mixins/reset-scroll-position"],function(e,t,n){e.default=t.default.Route.extend(n.default)}),define("dummy/services/ajax",["exports","ember-ajax/services/ajax"],function(e,t){Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}),define("dummy/services/keyboard",["exports","ember-keyboard/services/keyboard"],function(e,t){Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}),define("dummy/services/widget-manager",["exports","ember"],function(e,t){var n=t.default.Service,r=t.default.isEqual;e.default=n.extend({activate:function(e){var t=this.get("activeWidget");t&&!r(e,t)&&t.deactivate(),this.set("activeWidget",e)}})}),define("dummy/templates/application",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){var e=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:3,column:8},end:{line:3,column:36}},moduleName:"dummy/templates/application.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("Overview");return e.appendChild(t,n),t},buildRenderNodes:function(){return[]},statements:[],locals:[],templates:[]}}(),t=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:4,column:8},end:{line:4,column:33}},moduleName:"dummy/templates/application.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("Usage");return e.appendChild(t,n),t},buildRenderNodes:function(){return[]},statements:[],locals:[],templates:[]}}(),n=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:5,column:8},end:{line:5,column:39}},moduleName:"dummy/templates/application.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("Priority");return e.appendChild(t,n),t},buildRenderNodes:function(){return[]},statements:[],locals:[],templates:[]}}(),r=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:6,column:8},end:{line:6,column:35}},moduleName:"dummy/templates/application.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("Mixins");return e.appendChild(t,n),t},buildRenderNodes:function(){return[]},statements:[],locals:[],templates:[]}}(),a=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:7,column:8},end:{line:7,column:37}},moduleName:"dummy/templates/application.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("Testing");return e.appendChild(t,n),t},buildRenderNodes:function(){return[]},statements:[],locals:[],templates:[]}}();return{meta:{fragmentReason:{name:"triple-curlies"},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:17,column:0}},moduleName:"dummy/templates/application.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createElement("div");e.setAttribute(n,"class","container");var r=e.createTextNode("\n  ");e.appendChild(n,r);var r=e.createElement("ul");e.setAttribute(r,"class","menu");var a=e.createTextNode("\n    ");e.appendChild(r,a);var a=e.createElement("li"),o=e.createComment("");e.appendChild(a,o),e.appendChild(r,a);var a=e.createTextNode("\n    ");e.appendChild(r,a);var a=e.createElement("li"),o=e.createComment("");e.appendChild(a,o),e.appendChild(r,a);var a=e.createTextNode("\n    ");e.appendChild(r,a);var a=e.createElement("li"),o=e.createComment("");e.appendChild(a,o),e.appendChild(r,a);var a=e.createTextNode("\n    ");e.appendChild(r,a);var a=e.createElement("li"),o=e.createComment("");e.appendChild(a,o),e.appendChild(r,a);var a=e.createTextNode("\n    ");e.appendChild(r,a);var a=e.createElement("li"),o=e.createComment("");e.appendChild(a,o),e.appendChild(r,a);var a=e.createTextNode("\n  ");e.appendChild(r,a),e.appendChild(n,r);var r=e.createTextNode("\n  ");e.appendChild(n,r);var r=e.createElement("a");e.setAttribute(r,"href","https://github.com/null-null-null/ember-keyboard"),e.setAttribute(r,"target","_blank"),e.setAttribute(r,"class","github");var a=e.createTextNode("\n    ");e.appendChild(r,a);var a=e.createElement("img");e.setAttribute(a,"src","./octocat-438c17272c5f0e9f4a6da34d3e4bc5bd.png"),e.setAttribute(a,"class","octocat"),e.appendChild(r,a);var a=e.createTextNode("\n  ");e.appendChild(r,a),e.appendChild(n,r);var r=e.createTextNode("\n  ");e.appendChild(n,r);var r=e.createElement("h1"),a=e.createTextNode("\n    ");e.appendChild(r,a);var a=e.createElement("code"),o=e.createTextNode("ember-keyboard");e.appendChild(a,o),e.appendChild(r,a);var a=e.createTextNode("\n  ");e.appendChild(r,a),e.appendChild(n,r);var r=e.createTextNode("\n  ");e.appendChild(n,r);var r=e.createComment("");e.appendChild(n,r);var r=e.createTextNode("\n");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=e.childAt(t,[0]),a=e.childAt(r,[1]),o=new Array(6);return o[0]=e.createMorphAt(e.childAt(a,[1]),0,0),o[1]=e.createMorphAt(e.childAt(a,[3]),0,0),o[2]=e.createMorphAt(e.childAt(a,[5]),0,0),o[3]=e.createMorphAt(e.childAt(a,[7]),0,0),o[4]=e.createMorphAt(e.childAt(a,[9]),0,0),o[5]=e.createMorphAt(r,7,7),o},statements:[["block","link-to",["index"],[],0,null,["loc",[null,[3,8],[3,48]]]],["block","link-to",["usage"],[],1,null,["loc",[null,[4,8],[4,45]]]],["block","link-to",["priority"],[],2,null,["loc",[null,[5,8],[5,51]]]],["block","link-to",["mixins"],[],3,null,["loc",[null,[6,8],[6,47]]]],["block","link-to",["testing"],[],4,null,["loc",[null,[7,8],[7,49]]]],["content","outlet",["loc",[null,[15,2],[15,12]]]]],locals:[],templates:[e,t,n,r,a]}}())}),define("dummy/templates/components/key-down-counter",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){var e=function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["multiple-nodes","wrong-type"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:4,column:0}},moduleName:"dummy/templates/components/key-down-counter.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("  ");e.appendChild(t,n);var n=e.createElement("label"),r=e.createElement("code"),a=e.createTextNode("keyboardPriority");e.appendChild(r,a),e.appendChild(n,r);var r=e.createTextNode(":");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n  ");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,3,3,n),r},statements:[["inline","input",[],["value",["subexpr","@mut",[["get","keyboardPriority",["loc",[null,[3,16],[3,32]]]]],[],[]],"classNames","input-field","hook","counter-priority-input"],["loc",[null,[3,2],[3,89]]]]],locals:[],templates:[]}}(),t=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:6,column:0},end:{line:9,column:0}},moduleName:"dummy/templates/components/key-down-counter.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("  ");e.appendChild(t,n);var n=e.createElement("label"),r=e.createElement("code"),a=e.createTextNode("keyboardActivated");e.appendChild(r,a),e.appendChild(n,r);var r=e.createTextNode(":");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n  ");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,3,3,n),r},statements:[["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","toggleActivated",["loc",[null,[8,34],[8,49]]]]],[],[]],"classNames","checkbox","hook","counter-activated-toggle"],["loc",[null,[8,2],[8,105]]]]],locals:[],templates:[]}}(),n=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:11,column:0},end:{line:14,column:0}},moduleName:"dummy/templates/components/key-down-counter.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("  ");e.appendChild(t,n);var n=e.createElement("label"),r=e.createElement("code"),a=e.createTextNode("keyboardFirstResponder");e.appendChild(r,a),e.appendChild(n,r);var r=e.createTextNode(":");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n  ");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,3,3,n),r},statements:[["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","keyboardFirstResponder",["loc",[null,[13,34],[13,56]]]]],[],[]],"classNames","checkbox","hook","counter-first-responder-toggle"],["loc",[null,[13,2],[13,118]]]]],locals:[],templates:[]}}(),r=function(){return{meta:{fragmentReason:!1,revision:"Ember@2.6.1",loc:{source:null,start:{line:16,column:0},end:{line:19,column:0}},moduleName:"dummy/templates/components/key-down-counter.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createTextNode("  ");e.appendChild(t,n);var n=e.createElement("label"),r=e.createElement("code"),a=e.createTextNode("keyboardLaxPriority");e.appendChild(r,a),e.appendChild(n,r);var r=e.createTextNode(":");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n  ");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,3,3,n),r},statements:[["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","keyboardLaxPriority",["loc",[null,[18,34],[18,53]]]]],[],[]],"classNames","checkbox","hook","counter-lax-priority-toggle"],["loc",[null,[18,2],[18,112]]]]],locals:[],templates:[]}}();return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type","multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:22,column:0}},moduleName:"dummy/templates/components/key-down-counter.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createElement("div"),r=e.createComment("");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=e.childAt(t,[8]),a=new Array(6);return a[0]=e.createMorphAt(t,0,0,n),a[1]=e.createMorphAt(t,2,2,n),a[2]=e.createMorphAt(t,4,4,n),a[3]=e.createMorphAt(t,6,6,n),a[4]=e.createAttrMorph(r,"data-test"),a[5]=e.createMorphAt(r,0,0),e.insertBoundary(t,0),a},statements:[["block","if",[["get","priorityInput",["loc",[null,[1,6],[1,19]]]]],[],0,null,["loc",[null,[1,0],[4,7]]]],["block","if",[["get","activatedToggle",["loc",[null,[6,6],[6,21]]]]],[],1,null,["loc",[null,[6,0],[9,7]]]],["block","if",[["get","firstResponderToggle",["loc",[null,[11,6],[11,26]]]]],[],2,null,["loc",[null,[11,0],[14,7]]]],["block","if",[["get","laxPriorityToggle",["loc",[null,[16,6],[16,23]]]]],[],3,null,["loc",[null,[16,0],[19,7]]]],["attribute","data-test",["subexpr","hook",["counter-counter"],[],["loc",[null,[21,15],[21,41]]]]],["content","counter",["loc",[null,[21,42],[21,53]]]]],locals:[],templates:[e,t,n,r]}}())}),define("dummy/templates/components/keyboard-activated-widget",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type","multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:10,column:0}},moduleName:"dummy/templates/components/keyboard-activated-widget.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(4);return r[0]=e.createMorphAt(t,0,0,n),r[1]=e.createMorphAt(t,2,2,n),r[2]=e.createMorphAt(t,4,4,n),r[3]=e.createMorphAt(t,6,6,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n## `keyboardActivated`\n\nOnce you've included the `EKMixin`, you can activate and deactivate a component's keyboard responders by toggling the `keyboardActivated` property. In the examples below, you can toggle each counter's `keyboardActivated`:\n"],[],["loc",[null,[1,0],[5,3]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[7,35],[7,52]]]]],[],[]],"activatedToggle",!0],["loc",[null,[7,0],[7,75]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[8,35],[8,52]]]]],[],[]],"activatedToggle",!0],["loc",[null,[8,0],[8,75]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[9,35],[9,52]]]]],[],[]],"activatedToggle",!0],["loc",[null,[9,0],[9,75]]]]],locals:[],templates:[]}}())}),define("dummy/templates/components/keyboard-first-responder-widget",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type","multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:17,column:0}},moduleName:"dummy/templates/components/keyboard-first-responder-widget.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(4);return r[0]=e.createMorphAt(t,0,0,n),r[1]=e.createMorphAt(t,2,2,n),r[2]=e.createMorphAt(t,4,4,n),r[3]=e.createMorphAt(t,6,6,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n### `keyboardFirstResponder`\n\nSometimes you'll need a component to be the first responder, regardless of its `keyboardPriority` relative to other components. This can be useful if you want a low-priority component to temporarily gain precedence over everything else. To achieve this, use `keyboardFirstResponder`.\n\n```hbs\n{{my-component keyboardPriority=0 keyboardFirstResponder=true}} <!-- has precedence -->\n{{my-component keyboardPriority=1}}\n```\n\nWhen a component resigns `keyboardFirstResponder`, it will fall back to using its `keyboardPriority`.\n"],[],["loc",[null,[1,0],[12,3]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[14,35],[14,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"keyboardPriority",1],["loc",[null,[14,0],[14,139]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[15,35],[15,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"keyboardFirstResponder",!0],["loc",[null,[15,0],[15,148]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[16,35],[16,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0],["loc",[null,[16,0],[16,120]]]]],locals:[],templates:[]}}())}),define("dummy/templates/components/keyboard-lax-priority-widget",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type","multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:10,column:0}},moduleName:"dummy/templates/components/keyboard-lax-priority-widget.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(4);return r[0]=e.createMorphAt(t,0,0,n),r[1]=e.createMorphAt(t,2,2,n),r[2]=e.createMorphAt(t,4,4,n),r[3]=e.createMorphAt(t,6,6,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n### `keyboardLaxPriority`\n\nBy setting `keyboardLaxPriority` to `true`, you're saying that it will not block lower priority responders. This can help if you want a group of high level responders to always get a chance to handle key events without blocking the rest of your app. Note that all components within a given priority must have `keyboardLaxPriority` set to `true` or else the priority level will still block, as per usual.\n"],[],["loc",[null,[1,0],[5,3]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[7,35],[7,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"laxPriorityToggle",!0,"keyboardPriority",1,"hook","lax-priority-counter"],["loc",[null,[7,0],[7,190]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[8,35],[8,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"laxPriorityToggle",!0,"keyboardFirstResponder",!0,"keyboardLaxPriority",!0,"hook","lax-priority-counter"],["loc",[null,[8,0],[8,224]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[9,35],[9,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"laxPriorityToggle",!0,"hook","lax-priority-counter"],["loc",[null,[9,0],[9,171]]]]],locals:[],templates:[]}}())}),define("dummy/templates/components/keyboard-priority-widget",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type","multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:27,column:0}},moduleName:"dummy/templates/components/keyboard-priority-widget.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(4);return r[0]=e.createMorphAt(t,0,0,n),r[1]=e.createMorphAt(t,2,2,n),r[2]=e.createMorphAt(t,4,4,n),r[3]=e.createMorphAt(t,6,6,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n### `keyboardPriority`\n\nBy default, all activated components are treated as equal. If you have two components that respond to `ctrl+KeyA`, then both will respond when there's a `ctrl+KeyA` event. However, this behavior is undesirable in some scenarios. What if you have a modal open, and you only want it and its child components to respond to key events. You can get this behavior by assigning a higher priority to the modal and its children:\n\n```hbs\nnoPriorityComponent; // priority defaults to 0\nlowPriorityComponent.set('keyboardPriority', 0);\n\nmodal.set('keyboardPriority', 1);\nmodalChild.set('keyboardPriority', 1);\n```\n\nIn this scenario, when a key is pressed both `modal` and `modalChild` will have a chance to respond to it, while the remaining components will not. Once `modal` and `modalChild` are deactivated or their priority is lowered, then `lowPriorityComponent` and `noPriorityComponent` will be able to respond to key events.\n\nPerhaps more conveniently, this property can be passed in through your template:\n\n```hbs\n{{my-component keyboardPriority=1}}\n{{my-dynamic-component keyboardPriority=dynamicPriority}}\n```\n"],[],["loc",[null,[1,0],[22,3]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[24,35],[24,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0,"keyboardPriority",1],["loc",[null,[24,0],[24,113]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[25,35],[25,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0],["loc",[null,[25,0],[25,94]]]],["inline","key-down-counter",[],["parentActivated",["subexpr","@mut",[["get","keyboardActivated",["loc",[null,[26,35],[26,52]]]]],[],[]],"priorityInput",!0,"activatedToggle",!0],["loc",[null,[26,0],[26,94]]]]],locals:[],templates:[]}}())}),define("dummy/templates/components/trigger-event-test",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:5,column:0}},moduleName:"dummy/templates/components/trigger-event-test.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createElement("div"),r=e.createComment("");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createElement("div"),r=e.createComment("");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createElement("div"),r=e.createComment("");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createElement("div"),r=e.createComment("");e.appendChild(n,r),e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=e.childAt(t,[0]),a=e.childAt(t,[2]),o=e.childAt(t,[4]),i=e.childAt(t,[6]),l=new Array(8);return l[0]=e.createAttrMorph(r,"data-test"),l[1]=e.createMorphAt(r,0,0),l[2]=e.createAttrMorph(a,"data-test"),l[3]=e.createMorphAt(a,0,0),l[4]=e.createAttrMorph(o,"data-test"),l[5]=e.createMorphAt(o,0,0),l[6]=e.createAttrMorph(i,"data-test"),l[7]=e.createMorphAt(i,0,0),l},statements:[["attribute","data-test",["subexpr","hook",["key_down"],[],["loc",[null,[1,15],[1,34]]]]],["content","keyDown",["loc",[null,[1,35],[1,46]]]],["attribute","data-test",["subexpr","hook",["key_down_with_mods"],[],["loc",[null,[2,15],[2,44]]]]],["content","keyDownWithMods",["loc",[null,[2,45],[2,64]]]],["attribute","data-test",["subexpr","hook",["key_press"],[],["loc",[null,[3,15],[3,35]]]]],["content","keyPress",["loc",[null,[3,36],[3,48]]]],["attribute","data-test",["subexpr","hook",["key_up"],[],["loc",[null,[4,15],[4,32]]]]],["content","keyUp",["loc",[null,[4,33],[4,42]]]]],
locals:[],templates:[]}}())}),define("dummy/templates/index",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:12,column:0}},moduleName:"dummy/templates/index.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,0,0,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n## Installation\n\n`ember install ember-keyboard`\n\n## Overview\n\n`ember-keyboard` is a KeyboardEvent manager for Ember.js. It provides a simple API for responding to key events based on the [code property](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code), and it automatically applies a polyfill for browsers that do not yet support it.\n\nFor more complex scenarios, `ember-keyboard` also offers an API for managing which components and routes respond to key events, allowing you to control for application states such as modals and loading screens.\n"],[],["loc",[null,[1,0],[11,3]]]]],locals:[],templates:[]}}())}),define("dummy/templates/mixins",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:28,column:0}},moduleName:"dummy/templates/mixins.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,0,0,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n## Mixins\n\nTo reduce boilerplate, `ember-keyboard` includes several mixins with common patterns.\n\n**Note: these are used alongside `EKMixin`, it must be included as well for these to work.**\n\n### EKOnInsertMixin\n\n`import { EKOnInsertMixin } from 'ember-keyboard';`\n\nThis mixin will activate the component on `didInsertElement`, and as per normal, it will deactivate on `willDestroyElement`.\n\n### EKOnFocusMixin\n\n`import { EKOnFocusMixin } from 'ember-keyboard';`\n\nThis mixin will activate the component whenever it receives focus and deactivate it when it loses focus.\n\n### EKFirstResponderOnFocusMixin\n\n`import { EKFirstResponderOnFocusMixin } from 'ember-keyboard';`\n\nThis mixin grants the component first responder status while it is focused. When it loses focus, it resigns its status.\n\nNote that it will also activate the component on focus in, though it does not deactivate the component on focus out.\n"],[],["loc",[null,[1,0],[27,3]]]]],locals:[],templates:[]}}())}),define("dummy/templates/priority",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type","multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:22,column:0}},moduleName:"dummy/templates/priority.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(5);return r[0]=e.createMorphAt(t,0,0,n),r[1]=e.createMorphAt(t,2,2,n),r[2]=e.createMorphAt(t,4,4,n),r[3]=e.createMorphAt(t,6,6,n),r[4]=e.createMorphAt(t,8,8,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n## Priority\n\nBelow are several interactive demos of `ember-keyboard` properties. They allow you to see how different properties interact with each other. Simply click the containing box and try using the below key commands.\n\nControls:\n\n* `LeftArrow`: decrement counter by 1\n* `RightArrow`: increment counter by 1\n* `shift`+ArrowKey: increment/decrement x10\n* `ctrl+shift`+ArrowKey: increment/decrement x100\n* `r`: resets counter to 0\n"],[],["loc",[null,[1,0],[13,3]]]],["content","keyboard-activated-widget",["loc",[null,[15,0],[15,29]]]],["content","keyboard-priority-widget",["loc",[null,[17,0],[17,28]]]],["content","keyboard-first-responder-widget",["loc",[null,[19,0],[19,35]]]],["content","keyboard-lax-priority-widget",["loc",[null,[21,0],[21,32]]]]],locals:[],templates:[]}}())}),define("dummy/templates/test-scenario",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type","multiple-nodes"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:4,column:0}},moduleName:"dummy/templates/test-scenario.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");e.appendChild(t,n);var n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(3);return r[0]=e.createMorphAt(t,0,0,n),r[1]=e.createMorphAt(t,2,2,n),r[2]=e.createMorphAt(t,4,4,n),e.insertBoundary(t,0),r},statements:[["inline","key-down-counter",[],["parentActivated",!0,"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"laxPriorityToggle",!0],["loc",[null,[1,0],[1,130]]]],["inline","key-down-counter",[],["parentActivated",!0,"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"laxPriorityToggle",!0],["loc",[null,[2,0],[2,130]]]],["inline","key-down-counter",[],["parentActivated",!0,"priorityInput",!0,"activatedToggle",!0,"firstResponderToggle",!0,"laxPriorityToggle",!0],["loc",[null,[3,0],[3,130]]]]],locals:[],templates:[]}}())}),define("dummy/templates/testing",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:62,column:0}},moduleName:"dummy/templates/testing.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,0,0,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n## Testing\n\n### Trigger Key Events\n\nIf you need to manually trigger a key event (such as in a component integration test), you can use `triggerKeyDown`, `triggerKeyPress`, and `triggerKeyUp`:\n\n```js\nimport { triggerKeyDown, triggerKeyPress, triggerKeyUp } from 'ember-keyboard';\n\n. . . .\n\ntest('test my key bindings', function(assert) {\n  triggerKeyDown('KeyA');\n  triggerKeyUp('KeyA+shift+cmd');\n});\n```\n\n### Async Acceptance Test Helpers\n\n`ember-keyboard` comes with some test helpers to help out with your acceptance tests.\n\n```js\n. . . .\n\ntest('test my key bindings', function(assert) {\n  . . . .\n\n  keyUp('ArrowRight');\n\n  andThen(() => {\n    . . . .\n  });\n\n  keyDown('ArrowRight+ctrl+shift');\n\n  andThen(() => {\n    . . . .\n  });\n});\n```\n\nTo use them, you'll need to import them into `tests/helpers/start-app.js` above `application.injectTestHelpers()`:\n\n```js\n. . . .\nimport keyboardRegisterTestHelpers from './ember-keyboard/register-test-helpers';\n\nexport default function startApp(attrs) {\n  . . . .\n\n  Ember.run(function() {\n    . . . .\n    keyboardRegisterTestHelpers();\n    application.injectTestHelpers();\n  });\n\n  . . . .\n}\n```\n"],[],["loc",[null,[1,0],[61,3]]]]],locals:[],templates:[]}}())}),define("dummy/templates/usage",["exports"],function(e){e.default=Ember.HTMLBars.template(function(){return{meta:{fragmentReason:{name:"missing-wrapper",problems:["wrong-type"]},revision:"Ember@2.6.1",loc:{source:null,start:{line:1,column:0},end:{line:148,column:0}},moduleName:"dummy/templates/usage.hbs"},isEmpty:!1,arity:0,cachedFragment:null,hasRendered:!1,buildFragment:function(e){var t=e.createDocumentFragment(),n=e.createComment("");e.appendChild(t,n);var n=e.createTextNode("\n");return e.appendChild(t,n),t},buildRenderNodes:function(e,t,n){var r=new Array(1);return r[0]=e.createMorphAt(t,0,0,n),e.insertBoundary(t,0),r},statements:[["inline","formatMarkdown",["\n## Usage\n\nFirst, add `EKMixin` to a component or route:\n\n```js\nimport Ember from 'ember';\nimport { EKMixin } from 'ember-keyboard';\n\nexport default Ember.Component.extend(EKMixin, {\n  . . . .\n});\n```\n\nNow this component observes several new properties that'll help it determine when and if it should respond to key events. These properties are outlined in greater detail below, but to simply get things started, you'll need to set `keyboardActivated` to true:\n\n```js\n  activateKeyboard: Ember.on('init', function() {\n    this.set('keyboardActivated', true);\n  })\n```\n\nOr simply activate the component from your template:\n\n```hbs\n{{my-component keyboardActivated=true}}\n```\n\nOnce it's activated, this component will start listening for key events. Let's say you want this component to respond to the key `s` as well as `ctrl+shift+a`. You could do so with:\n\n```js\nimport { keyUp, keyDown } from 'ember-keyboard';\n\n. . . .\n\naFunction: Ember.on(keyUp('KeyS'), function() {\n  console.log('`KeyS` was pressed');\n}),\n\nanotherFunction: Ember.on(keyDown('ctrl+shift+KeyA'), function() {\n  console.log('`ctrl+shift+KeyA` is being held');\n})\n```\n\n### Modifier Keys\n\nAs mentioned above, you can augment your key bindings with modifier keys, including `ctrl`, `shift`, `alt`, and `meta`. In addition, `ember-keyboard` supports a special key definition called `cmd`. It is very common for macOS users to expect to use key combinations such as Command(⌘)+Key, where a PC or Linux user would use Ctrl+Key. `cmd` handles this behavior. For instance this defintion:\n\n```js\ntriggerSubmit: Ember.on(keyDown('Enter+cmd'), function() {\n  this.submit();\n});\n```\n\nwill trigger on Command(⌘)+Enter on macOS or Ctrl+Enter on all other platforms.\n\nNote that `ctrl` should be used with caution, as MacOSs will swollow some `ctrl` events before `ember-keyboard` can observe them.\n\n### `keyUp`, `keyDown`, and `keyPress`\n\nBy default, `ember-keyboard` listens to `keydown`, `keyup`, and `keypress` events, and has corresponding functions:\n\n```js\nimport { keyUp, keyDown, keyPress } from 'ember-keyboard';\n```\n\nIf you want `ember-keyboard` to listen to fewer events, then you can specify them in your `config/environment.js` file like so:\n\n```js\nENV.emberKeyboard = {\n  listeners: ['keyUp', 'keyDown'] // use only `keyUp` and `keyDown`\n}\n```\n\nNote that `keydown` events fire repeatedly while the key is pressed, while `keyup` events fire only once, after the key has been released.\n\n### `event`\n\nWhen `ember-keyboard` triggers an event, it passes in the `event` object as its first argument:\n\n```js\nsaveDocument: Ember.on(keyDown('ctrl+KeyS'), function(event) {\n  this.performSave();\n  event.preventDefault();\n})\n```\n\nNote that if you want `preventDefault` to prevent `window` level events, you'll need to use `keyDown`, as the default event will fire before `keyUp`.\n\n### `getCode`\n\nDid you know that 65 was the keycode for 'KeyA'? Or that 37 was the keycode for the right arrow? If you don't want to litter your code with keycode references, you can use `getCode`, which `ember-keyboard` uses internally:\n\n```js\nimport { getCode } from 'ember-keyboard';\n\n. . . .\n\nkeyMapper: Ember.on(keyDown('KeyA'), keyDown('KeyB'), keyDown('KeyC'), function(event) {\n  const key = getCode(event);\n  switch (key) {\n    match 'KeyA': console.log('It\\'s an a!'); break;\n    . . . .\n  }\n})\n```\n\n### `getKeyCode`\n\nOn the other end of things, if you need to convert a code into a keycode, you can use `getKeyCode`. This is particularly useful when testing:\n\n```js\nimport { getKeyCode } from 'ember-keyboard';\n\n. . . .\n\nkeyEvent(document, 'keydown', getKeyCode('KeyA'));\nkeyEvent(document, 'keydown', getKeyCode('ArrowRight'));\nkeyEvent(document, 'keydown', getKeyCode('Backspace'));\nkeyEvent(document, 'keydown', getKeyCode('Space'));\n```\n\nJust pass in an `event`, and it'll return a human readable key. Look [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code) for a full mapping.\n\n### Key Indifference\n\nIf you want an event to fire for every keypress, then simply don't provide a keystring to `keyUp` or `keyDown`. This can be a handy way to trigger events for large ranges of keys, such as on any alphanumeric keypress. For instance:\n\n```js\ntriggerOnAlphaNumeric: Ember.on(keyUp(), function(event) {\n  if (/^Key\\w(?!.)/.test(getCode(event))) {\n    this.startEditing();\n  }\n})\n```\n\n### `Ember.TextField` && `Ember.TextArea`\n\nTo prevent `ember-keyboard` from responding to key strokes while an input/textarea is focused, we've reopened `Ember.TextField` and `Ember.TextArea` and applied the `EKOnInsertMixin` and `EKFirstResponderOnFocusMixin`. This ensures that whenever an input is focused, other key responders will not fire. If you want to have responders associated with an input or textarea (such as a rich text editor with `keyUp('ctrl+i')` bindings), you need to extend these components from `Ember.TextField` or `Ember.TextArea` rather than `Ember.component`.\n\nThis applies to `input` and `textarea` helpers:\n\n```hbs\n{{input}}\n{{textarea}}\n```\n"],[],["loc",[null,[1,0],[147,3]]]]],locals:[],templates:[]}}())}),define("dummy/utils/get-cmd-key",["exports","ember-keyboard/utils/get-cmd-key"],function(e,t){Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}),define("dummy/utils/listener-name",["exports","ember-keyboard/utils/listener-name"],function(e,t){Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}),define("dummy/config/environment",["ember"],function(e){var t="dummy";try{var n=t+"/config/environment",r=e.default.$('meta[name="'+n+'"]').attr("content"),a=JSON.parse(unescape(r));return{default:a}}catch(e){throw new Error('Could not read config from meta tag with name "'+n+'".')}}),runningTests||require("dummy/app").default.create({name:"ember-keyboard",version:"2.1.3+1def7ee6"});